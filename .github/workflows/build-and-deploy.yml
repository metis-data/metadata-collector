name: Build and deploy
on:
  workflow_dispatch:
    inputs:
      docker_image_tag:
        type: string
        default: dev-latest
        description: when not specified - image is set to 'dev-latest'
      is_latest:
        required: false
        type: boolean
        default: false
jobs:
  deploy_docker:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./client-agent/src
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: arn:aws:iam::357242092635:role/github-action-metis-production-agent
          aws-region: us-east-1

      - name: Node packages cache
        id: node-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1.5.1
        with:
          registry-type: public
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true # Ignore the failure of a step and avoid terminating the job.

        # remove 
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: build and deploy
        id: build-and-deploy
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          IS_LATEST: "${{ inputs.is_latest }}"
        run: |
          DOCKER_ID=$(docker build \
            --build-arg NPM_TOKEN_READ_ONLY=${{ secrets.NPM_TOKEN_READ_ONLY }} \
            --build-arg DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }} \
            --build-arg SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
            -q -t $REGISTRY/o2c0x5x8/metis-md-collector .)


          COMMIT_SHA_TAG=$(git rev-parse --short HEAD)
          PACKAGE_JSON_HASH_TAG=$(shasum package.json | awk '{ print $1 }')
          CUSTOM_TAG="${{ inputs.docker_image_tag }}"

          
          TAGS=("$COMMIT_SHA_TAG" "$PACKAGE_JSON_HASH_TAG", "$CUSTOM_TAG", )

          if [ -n "$IS_LATEST" ] && [ "$IS_LATEST" = "true" ]; then
          TAGS+=("latest")
          fi

          for tag in "${TAGS[@]}"; do
            if [ -n "${{ inputs.docker_image_tag }}" ]; then
              docker tag $DOCKER_ID $REGISTRY/o2c0x5x8/metis-md-collector:$tag
              docker push $REGISTRY/o2c0x5x8/metis-md-collector:$tag
            fi
          done


          echo "tag=$COMMIT_SHA_TAG" >> $GITHUB_ENV

      - name: create cloud formation
        env:
          APP_ENV: staging
          INGEST_URL: ingest-stg.metisdata.io
          WEB_APP_HOST: dev.metisdata.io
          TAG: ${{ steps.build-and-deploy.outputs.tag }}
        run: |
          echo "APP_ENV: $APP_ENV"
          echo "INGEST_URL: $INGEST_URL"
          echo "WEB_APP_HOST: $WEB_APP_HOST"
          echo "TAG: $TAG"

          cat ../../metadata-collector-cloudformation.yaml | \
              sed -e "s+ingest.metisdata.io+$INGEST_URL+g" \
                  -e "s+app.metisdata.io+$WEB_APP_HOST+g" \
                  -e "s+Value: production+Value: $APP_ENV+g" \
                  -e "s+Image: public.ecr.aws/o2c0x5x8/metis-md-collector:latest+Image: public.ecr.aws/o2c0x5x8/metis-md-collector:$TAG+g" \
              > ../../metadata-collector-cloudformation-stg.yaml
          cp ../../metadata-collector-cloudformation-stg.yaml .

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cloudformation.yaml
          path: metadata-collector-cloudformation-stg.yaml